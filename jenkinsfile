pipeline {
    agent {
        label 'arathi-ubuntu-a'
    }

    environment {
        // Artifact directories
        DOCKERHUB_USER = 'arathi'
        IMAGE_NAME = 'jenkins-docker-lab'
        REPORT_DIR = "scan-reports"
        IMAGE_VULN = "vulnerable-app:v1"
        IMAGE_SECURE = "vulnerable-app:v2-secure"
    }

    stages {

        /* -----------------------------------------------------------
           SETUP WORKSPACE
        ------------------------------------------------------------ */
        stage('Setup Workspace') {
            steps {
                sh '''
                mkdir -p vulnerable-app
                cd vulnerable-app

                echo "from flask import Flask
import requests
app = Flask(__name__)
@app.route('/')
def hello():
    return 'Hello from Vulnerable App!'
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
" > app.py

                echo "FROM python:3.9-slim
WORKDIR /app
RUN pip install flask==2.0.1 requests==2.25.1
COPY app.py .
EXPOSE 5000
CMD [\\"python\\", \\"app.py\\"]
" > Dockerfile
                '''
            }
        }

        /* -----------------------------------------------------------
           BUILD VULNERABLE IMAGE
        ------------------------------------------------------------ */
        stage('Build Vulnerable Image') {
            steps {
                dir('vulnerable-app') {
                    sh '''
                    docker build -t ${IMAGE_VULN} .
                    echo ""
                    docker images | grep vulnerable-app
                    '''
                }
            }
        }

        /* -----------------------------------------------------------
           TRIVY SCAN - VULNERABLE IMAGE
        ------------------------------------------------------------ */
        stage('Scan Vulnerable Image') {
            steps {
                dir('vulnerable-app') {
                    sh '''
                    echo ""
                    echo "==================== VULNERABLE IMAGE SCAN ===================="
                    trivy image --severity HIGH,CRITICAL --format table ${IMAGE_VULN} | tee ../${REPORT_DIR}_v1_table.txt || true

                    echo ""
                    echo "==================== GENERATING JSON REPORT ==================="
                    mkdir -p ../${REPORT_DIR}
                    trivy image --severity HIGH,CRITICAL --format json \
                        --output ../${REPORT_DIR}/trivy-before.json ${IMAGE_VULN}
                    '''
                }
            }
        }

        /* -----------------------------------------------------------
           CREATE & BUILD SECURE IMAGE
        ------------------------------------------------------------ */
        stage('Create Secure Dockerfile and Build') {
            steps {
                dir('vulnerable-app') {
                    sh '''
                    echo "FROM python:3.11-slim
RUN useradd -m -u 1000 appuser
WORKDIR /app
COPY app.py .
RUN pip install --no-cache-dir flask==3.0.0 requests==2.31.0
RUN chown -R appuser:appuser /app
USER appuser
EXPOSE 5000
CMD [\\"python\\", \\"app.py\\"]
" > Dockerfile.secure

                    docker build -f Dockerfile.secure -t ${IMAGE_SECURE} .
                    '''
                }
            }
        }

        /* -----------------------------------------------------------
           FUNCTIONAL TEST - SECURE IMAGE
        ------------------------------------------------------------ */
        stage('Functional Test of Secure Image') {
            steps {
                sh '''
                docker run -d --name test-secure -p 5000:5000 ${IMAGE_SECURE}
                sleep 5
                echo "===== Application Test Output ====="
                curl -s http://localhost:5000 || true
                docker stop test-secure && docker rm test-secure
                '''
            }
        }

        /* -----------------------------------------------------------
           TRIVY SCAN - SECURE IMAGE
        ------------------------------------------------------------ */
        stage('Scan Secure Image (Post‑Remediation)') {
            steps {
                dir('vulnerable-app') {
                    sh '''
                    echo ""
                    echo "===================== SECURE IMAGE SCAN ======================="
                    trivy image --severity HIGH,CRITICAL --format table ${IMAGE_SECURE} | tee ../${REPORT_DIR}_v2_table.txt || true

                    echo ""
                    echo "===================== GENERATING JSON REPORT =================="
                    trivy image --severity HIGH,CRITICAL --format json \
                        --output ../${REPORT_DIR}/trivy-after.json ${IMAGE_SECURE}
                    '''
                }
            }
        }

        /* -----------------------------------------------------------
           COMPARE SCAN RESULTS
        ------------------------------------------------------------ */
        stage('Compare Vulnerability Results') {
            steps {
                sh '''
                echo ""
                echo "===================== SUMMARY COMPARISON ======================"
                BEFORE=$(grep -i "VulnerabilityID" ${REPORT_DIR}/trivy-before.json | wc -l || echo 0)
                AFTER=$(grep -i "VulnerabilityID" ${REPORT_DIR}/trivy-after.json | wc -l || echo 0)
                if [ "$BEFORE" -eq 0 ]; then BEFORE=0; fi
                if [ "$AFTER" -eq 0 ]; then AFTER=0; fi

                printf "\\n| %-25s | %-15s |\\n" "Image Version" "Vulnerabilities"
                printf "| %-25s | %-15s |\\n" "------------------------" "---------------"
                printf "| %-25s | %-15s |\\n" "vulnerable-app:v1" "$BEFORE"
                printf "| %-25s | %-15s |\\n" "vulnerable-app:v2-secure" "$AFTER"
                echo ""

                if [ "$BEFORE" -gt 0 ]; then
                  REDUCTION=$(echo "scale=2; 100 - ($AFTER / $BEFORE * 100)" | bc -l)
                  echo "Reduction Achieved: ${REDUCTION}%"
                fi
                echo ""
                echo "===================== TOP REMAINING CVEs ======================"
                jq -r '.Results[].Vulnerabilities[]? | [.VulnerabilityID,.PkgName,.Severity] | @tsv' ${REPORT_DIR}/trivy-after.json | \
                    column -t -s $'\\t' | head -20 || true
                '''
            }
        }

        /* -----------------------------------------------------------
           ARCHIVE REPORTS
        ------------------------------------------------------------ */
        stage('Archive Scan Artifacts') {
            steps {
                dir('vulnerable-app') {
                    sh '''
                    cp Dockerfile ../${REPORT_DIR}/Dockerfile.v1
                    cp Dockerfile.secure ../${REPORT_DIR}/Dockerfile.v2-secure
                    '''
                }
                archiveArtifacts artifacts: "${REPORT_DIR}/**", fingerprint: true
            }
        }
    }

    post {
        always {
            echo "Cleaning up images and build cache..."
            sh 'docker system prune -f'
        }
        success {
            echo "Trivy scan pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed — check console tables above."
        }
    }
}